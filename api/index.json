[{"name":"ari_utils","qualifiedName":"ari_utils","href":"ari_utils/ari_utils-library.html","type":"library","overriddenDepth":0,"packageName":"ari_utils","desc":""},{"name":"BoolFunctionMap","qualifiedName":"ari_utils.BoolFunctionMap","href":"ari_utils/BoolFunctionMap.html","type":"typedef","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"ari_utils","type":"library","href":"ari_utils/ari_utils-library.html"}},{"name":"EnumListItem","qualifiedName":"ari_utils.EnumListItem","href":"ari_utils/EnumListItem-class.html","type":"class","overriddenDepth":0,"packageName":"ari_utils","desc":"Class to hold index and value of a list specifically with enumerateList.","enclosedBy":{"name":"ari_utils","type":"library","href":"ari_utils/ari_utils-library.html"}},{"name":"EnumListItem","qualifiedName":"ari_utils.EnumListItem.EnumListItem","href":"ari_utils/EnumListItem/EnumListItem.html","type":"constructor","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"EnumListItem","type":"class","href":"ari_utils/EnumListItem-class.html"}},{"name":"i","qualifiedName":"ari_utils.EnumListItem.i","href":"ari_utils/EnumListItem/i.html","type":"property","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"EnumListItem","type":"class","href":"ari_utils/EnumListItem-class.html"}},{"name":"index","qualifiedName":"ari_utils.EnumListItem.index","href":"ari_utils/EnumListItem/index.html","type":"property","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"EnumListItem","type":"class","href":"ari_utils/EnumListItem-class.html"}},{"name":"v","qualifiedName":"ari_utils.EnumListItem.v","href":"ari_utils/EnumListItem/v.html","type":"property","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"EnumListItem","type":"class","href":"ari_utils/EnumListItem-class.html"}},{"name":"value","qualifiedName":"ari_utils.EnumListItem.value","href":"ari_utils/EnumListItem/value.html","type":"property","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"EnumListItem","type":"class","href":"ari_utils/EnumListItem-class.html"}},{"name":"Logical","qualifiedName":"ari_utils.Logical","href":"ari_utils/Logical-class.html","type":"class","overriddenDepth":0,"packageName":"ari_utils","desc":"Logic operators for booleans","enclosedBy":{"name":"ari_utils","type":"library","href":"ari_utils/ari_utils-library.html"}},{"name":"Logical","qualifiedName":"ari_utils.Logical.Logical","href":"ari_utils/Logical/Logical.html","type":"constructor","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"Logical","type":"class","href":"ari_utils/Logical-class.html"}},{"name":"all","qualifiedName":"ari_utils.Logical.all","href":"ari_utils/Logical/all.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"Returns true if all entries are true, else false","enclosedBy":{"name":"Logical","type":"class","href":"ari_utils/Logical-class.html"}},{"name":"any","qualifiedName":"ari_utils.Logical.any","href":"ari_utils/Logical/any.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"Returns true if any entry is true, else false","enclosedBy":{"name":"Logical","type":"class","href":"ari_utils/Logical-class.html"}},{"name":"nor","qualifiedName":"ari_utils.Logical.nor","href":"ari_utils/Logical/nor.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"Logical","type":"class","href":"ari_utils/Logical-class.html"}},{"name":"not","qualifiedName":"ari_utils.Logical.not","href":"ari_utils/Logical/not.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"Logical","type":"class","href":"ari_utils/Logical-class.html"}},{"name":"toBit","qualifiedName":"ari_utils.Logical.toBit","href":"ari_utils/Logical/toBit.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"Takes bool and returns 1 if true 0 if false","enclosedBy":{"name":"Logical","type":"class","href":"ari_utils/Logical-class.html"}},{"name":"xand","qualifiedName":"ari_utils.Logical.xand","href":"ari_utils/Logical/xand.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"Logical","type":"class","href":"ari_utils/Logical-class.html"}},{"name":"xor","qualifiedName":"ari_utils.Logical.xor","href":"ari_utils/Logical/xor.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"Logical","type":"class","href":"ari_utils/Logical-class.html"}},{"name":"MapUtils","qualifiedName":"ari_utils.MapUtils","href":"ari_utils/MapUtils.html","type":"extension","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"ari_utils","type":"library","href":"ari_utils/ari_utils-library.html"}},{"name":"containsDuplicateValues","qualifiedName":"ari_utils.MapUtils.containsDuplicateValues","href":"ari_utils/MapUtils/containsDuplicateValues.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"Checks if a map contains duplicate values in its values by using sets","enclosedBy":{"name":"MapUtils","type":"extension","href":"ari_utils/MapUtils.html"}},{"name":"equals","qualifiedName":"ari_utils.MapUtils.equals","href":"ari_utils/MapUtils/equals.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"MapUtils","type":"extension","href":"ari_utils/MapUtils.html"}},{"name":"swap","qualifiedName":"ari_utils.MapUtils.swap","href":"ari_utils/MapUtils/swap.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"Returns a map with the keys and values swapped. If there are duplicate keys\nthe function throws an argument error (So use with containsDuplicateValues()).","enclosedBy":{"name":"MapUtils","type":"extension","href":"ari_utils/MapUtils.html"}},{"name":"where","qualifiedName":"ari_utils.MapUtils.where","href":"ari_utils/MapUtils/where.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"Works like List.where, you put in a function that takes a MapEntry and returns a bool.\nThis will return new Map where the above function is true.","enclosedBy":{"name":"MapUtils","type":"extension","href":"ari_utils/MapUtils.html"}},{"name":"NumIs","qualifiedName":"ari_utils.NumIs","href":"ari_utils/NumIs.html","type":"extension","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"ari_utils","type":"library","href":"ari_utils/ari_utils-library.html"}},{"name":"isDouble","qualifiedName":"ari_utils.NumIs.isDouble","href":"ari_utils/NumIs/isDouble.html","type":"property","overriddenDepth":0,"packageName":"ari_utils","desc":"Checks if num is decimal","enclosedBy":{"name":"NumIs","type":"extension","href":"ari_utils/NumIs.html"}},{"name":"isInt","qualifiedName":"ari_utils.NumIs.isInt","href":"ari_utils/NumIs/isInt.html","type":"property","overriddenDepth":0,"packageName":"ari_utils","desc":"Checks if num is int","enclosedBy":{"name":"NumIs","type":"extension","href":"ari_utils/NumIs.html"}},{"name":"isPositive","qualifiedName":"ari_utils.NumIs.isPositive","href":"ari_utils/NumIs/isPositive.html","type":"property","overriddenDepth":0,"packageName":"ari_utils","desc":"Checks if a number &gt; 0","enclosedBy":{"name":"NumIs","type":"extension","href":"ari_utils/NumIs.html"}},{"name":"PythonicListMethods","qualifiedName":"ari_utils.PythonicListMethods","href":"ari_utils/PythonicListMethods.html","type":"extension","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"ari_utils","type":"library","href":"ari_utils/ari_utils-library.html"}},{"name":"equals","qualifiedName":"ari_utils.PythonicListMethods.equals","href":"ari_utils/PythonicListMethods/equals.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"PythonicListMethods","type":"extension","href":"ari_utils/PythonicListMethods.html"}},{"name":"negativeIndex","qualifiedName":"ari_utils.PythonicListMethods.negativeIndex","href":"ari_utils/PythonicListMethods/negativeIndex.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"Similar to negative index in python -1 will return the last thing in the list\n0 or over will return its [] operator","enclosedBy":{"name":"PythonicListMethods","type":"extension","href":"ari_utils/PythonicListMethods.html"}},{"name":"negativeIndexEquals","qualifiedName":"ari_utils.PythonicListMethods.negativeIndexEquals","href":"ari_utils/PythonicListMethods/negativeIndexEquals.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"Setter for above","enclosedBy":{"name":"PythonicListMethods","type":"extension","href":"ari_utils/PythonicListMethods.html"}},{"name":"slice","qualifiedName":"ari_utils.PythonicListMethods.slice","href":"ari_utils/PythonicListMethods/slice.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"Returns a list slice from given list with all indices contained within the\ngiven range. START INCLUSIVE | END EXCLUSIVE. By default start=0, stop=list.length, step=1. Invalid inputs\nare met with ArgumentErrors.\nex:\n1,2,3,5,6.slice(4) =&gt; 1 2 3","enclosedBy":{"name":"PythonicListMethods","type":"extension","href":"ari_utils/PythonicListMethods.html"}},{"name":"splitBeforeIndex","qualifiedName":"ari_utils.PythonicListMethods.splitBeforeIndex","href":"ari_utils/PythonicListMethods/splitBeforeIndex.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"Returns a list of two sub-lists based off self:\nList 1: All items before specified index\nList 2: All items after specified index\nNegative -1 is the same as the last list item and all negative numbers are likewise\n0 leads to [[],this]\nwhereas an index&gt;this.length leads to [this,[]]","enclosedBy":{"name":"PythonicListMethods","type":"extension","href":"ari_utils/PythonicListMethods.html"}},{"name":"StringIter","qualifiedName":"ari_utils.StringIter","href":"ari_utils/StringIter.html","type":"extension","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"ari_utils","type":"library","href":"ari_utils/ari_utils-library.html"}},{"name":"iterate","qualifiedName":"ari_utils.StringIter.iterate","href":"ari_utils/StringIter/iterate.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"Use to iterate over the individual characters\nof a String: \"Hello\".iterate() -&gt; 'H' 'e' 'l' 'l' 'o'","enclosedBy":{"name":"StringIter","type":"extension","href":"ari_utils/StringIter.html"}},{"name":"Zip","qualifiedName":"ari_utils.Zip","href":"ari_utils/Zip-class.html","type":"class","overriddenDepth":0,"packageName":"ari_utils","desc":"Zip is a list class with added functionality that pairs two equal matching\niterables and combines the elements of the two iterables\ninto a compound ZipItem that contains both of those elements. The added\nfunctionality is related to things therein such as:\n  swap all elements,\n  go from zip to map,\n  check if an element is contained within any of the pairs,\n  etc\nLike zip() in python","enclosedBy":{"name":"ari_utils","type":"library","href":"ari_utils/ari_utils-library.html"}},{"name":"operator ==","qualifiedName":"ari_utils.Zip.==","href":"ari_utils/Zip/operator_equals.html","type":"method","overriddenDepth":1,"packageName":"ari_utils","desc":"The equality operator.","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"Zip","qualifiedName":"ari_utils.Zip.Zip","href":"ari_utils/Zip/Zip.html","type":"constructor","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"addItem","qualifiedName":"ari_utils.Zip.addItem","href":"ari_utils/Zip/addItem.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"base","qualifiedName":"ari_utils.Zip.base","href":"ari_utils/Zip/base.html","type":"property","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"Zip.castFromMap","qualifiedName":"ari_utils.Zip.castFromMap","href":"ari_utils/Zip/Zip.castFromMap.html","type":"constructor","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"contains","qualifiedName":"ari_utils.Zip.contains","href":"ari_utils/Zip/contains.html","type":"method","overriddenDepth":2,"packageName":"ari_utils","desc":"Checks if item is any of the ZipItem entries, if the item is a\nZipItem checks if it is in the base list itself.","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"copyWith","qualifiedName":"ari_utils.Zip.copyWith","href":"ari_utils/Zip/copyWith.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"Zip.create","qualifiedName":"ari_utils.Zip.create","href":"ari_utils/Zip/Zip.create.html","type":"constructor","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"extendItems","qualifiedName":"ari_utils.Zip.extendItems","href":"ari_utils/Zip/extendItems.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"first","qualifiedName":"ari_utils.Zip.first","href":"ari_utils/Zip/first.html","type":"property","overriddenDepth":0,"packageName":"ari_utils","desc":"Returns the first element.","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"Zip.fromEvenListParity","qualifiedName":"ari_utils.Zip.fromEvenListParity","href":"ari_utils/Zip/Zip.fromEvenListParity.html","type":"constructor","overriddenDepth":0,"packageName":"ari_utils","desc":"Creates a Zip by pairing an even index with its next odd index\nThe list must have an even length or you will encounter an ArgumentError\nex:\n1,2,3,4,5,6 --&gt;\n1,2\n3,4\n5,6","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"Zip.fromEvenListSplit","qualifiedName":"ari_utils.Zip.fromEvenListSplit","href":"ari_utils/Zip/Zip.fromEvenListSplit.html","type":"constructor","overriddenDepth":0,"packageName":"ari_utils","desc":"Creates a Zip by splitting the list in half and zipping the entries on the\nfirst half of the list with the entries of the equivalent index on the second\nhalf of the list.\nThe list must have an even length or you will encounter an ArgumentError\nex:\n1,2,3,4,5,6 --&gt;\n1,4\n2,5\n3,6","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"hashCode","qualifiedName":"ari_utils.Zip.hashCode","href":"ari_utils/Zip/hashCode.html","type":"property","overriddenDepth":0,"packageName":"ari_utils","desc":"The hash code for this object.","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"item1List","qualifiedName":"ari_utils.Zip.item1List","href":"ari_utils/Zip/item1List.html","type":"property","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"item2List","qualifiedName":"ari_utils.Zip.item2List","href":"ari_utils/Zip/item2List.html","type":"property","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"last","qualifiedName":"ari_utils.Zip.last","href":"ari_utils/Zip/last.html","type":"property","overriddenDepth":0,"packageName":"ari_utils","desc":"Returns the last element.","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"length","qualifiedName":"ari_utils.Zip.length","href":"ari_utils/Zip/length.html","type":"property","overriddenDepth":0,"packageName":"ari_utils","desc":"Returns the number of elements in this.","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"swapAll","qualifiedName":"ari_utils.Zip.swapAll","href":"ari_utils/Zip/swapAll.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"toJson","qualifiedName":"ari_utils.Zip.toJson","href":"ari_utils/Zip/toJson.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"toMap","qualifiedName":"ari_utils.Zip.toMap","href":"ari_utils/Zip/toMap.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"toMapSwitched","qualifiedName":"ari_utils.Zip.toMapSwitched","href":"ari_utils/Zip/toMapSwitched.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"toString","qualifiedName":"ari_utils.Zip.toString","href":"ari_utils/Zip/toString.html","type":"method","overriddenDepth":2,"packageName":"ari_utils","desc":"A string representation of this object.","enclosedBy":{"name":"Zip","type":"class","href":"ari_utils/Zip-class.html"}},{"name":"ZipItem","qualifiedName":"ari_utils.ZipItem","href":"ari_utils/ZipItem-class.html","type":"class","overriddenDepth":0,"packageName":"ari_utils","desc":"Class for a pair belonging to a zip with some functionality including:\nswapping, ==, to &amp; From type constructors, [] operations.","enclosedBy":{"name":"ari_utils","type":"library","href":"ari_utils/ari_utils-library.html"}},{"name":"operator ==","qualifiedName":"ari_utils.ZipItem.==","href":"ari_utils/ZipItem/operator_equals.html","type":"method","overriddenDepth":1,"packageName":"ari_utils","desc":"The equality operator.","enclosedBy":{"name":"ZipItem","type":"class","href":"ari_utils/ZipItem-class.html"}},{"name":"ZipItem","qualifiedName":"ari_utils.ZipItem.ZipItem","href":"ari_utils/ZipItem/ZipItem.html","type":"constructor","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"ZipItem","type":"class","href":"ari_utils/ZipItem-class.html"}},{"name":"operator []","qualifiedName":"ari_utils.ZipItem.[]","href":"ari_utils/ZipItem/operator_get.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"0 retrieves first item 1 retrieves 2nd, negative numbers retrieve\n0 if even or 1 if odd","enclosedBy":{"name":"ZipItem","type":"class","href":"ari_utils/ZipItem-class.html"}},{"name":"operator []=","qualifiedName":"ari_utils.ZipItem.[]=","href":"ari_utils/ZipItem/operator_put.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"ZipItem","type":"class","href":"ari_utils/ZipItem-class.html"}},{"name":"copyWith","qualifiedName":"ari_utils.ZipItem.copyWith","href":"ari_utils/ZipItem/copyWith.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"ZipItem","type":"class","href":"ari_utils/ZipItem-class.html"}},{"name":"ZipItem.fromList","qualifiedName":"ari_utils.ZipItem.fromList","href":"ari_utils/ZipItem/ZipItem.fromList.html","type":"constructor","overriddenDepth":0,"packageName":"ari_utils","desc":"Creates ZipItem from list of exactly 2","enclosedBy":{"name":"ZipItem","type":"class","href":"ari_utils/ZipItem-class.html"}},{"name":"ZipItem.fromMap","qualifiedName":"ari_utils.ZipItem.fromMap","href":"ari_utils/ZipItem/ZipItem.fromMap.html","type":"constructor","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"ZipItem","type":"class","href":"ari_utils/ZipItem-class.html"}},{"name":"hashCode","qualifiedName":"ari_utils.ZipItem.hashCode","href":"ari_utils/ZipItem/hashCode.html","type":"property","overriddenDepth":0,"packageName":"ari_utils","desc":"The hash code for this object.","enclosedBy":{"name":"ZipItem","type":"class","href":"ari_utils/ZipItem-class.html"}},{"name":"item1","qualifiedName":"ari_utils.ZipItem.item1","href":"ari_utils/ZipItem/item1.html","type":"property","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"ZipItem","type":"class","href":"ari_utils/ZipItem-class.html"}},{"name":"item2","qualifiedName":"ari_utils.ZipItem.item2","href":"ari_utils/ZipItem/item2.html","type":"property","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"ZipItem","type":"class","href":"ari_utils/ZipItem-class.html"}},{"name":"swap","qualifiedName":"ari_utils.ZipItem.swap","href":"ari_utils/ZipItem/swap.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"Returns shallow copy with item1 &amp; item2 swapped","enclosedBy":{"name":"ZipItem","type":"class","href":"ari_utils/ZipItem-class.html"}},{"name":"toList","qualifiedName":"ari_utils.ZipItem.toList","href":"ari_utils/ZipItem/toList.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"ZipItem","type":"class","href":"ari_utils/ZipItem-class.html"}},{"name":"toMap","qualifiedName":"ari_utils.ZipItem.toMap","href":"ari_utils/ZipItem/toMap.html","type":"method","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"ZipItem","type":"class","href":"ari_utils/ZipItem-class.html"}},{"name":"toString","qualifiedName":"ari_utils.ZipItem.toString","href":"ari_utils/ZipItem/toString.html","type":"method","overriddenDepth":1,"packageName":"ari_utils","desc":"A string representation of this object.","enclosedBy":{"name":"ZipItem","type":"class","href":"ari_utils/ZipItem-class.html"}},{"name":"enumerateList","qualifiedName":"ari_utils.enumerateList","href":"ari_utils/enumerateList.html","type":"function","overriddenDepth":0,"packageName":"ari_utils","desc":"Like python enumerate but with EnumListItem to iterate over a list with\nits index and value in a comfortable way.","enclosedBy":{"name":"ari_utils","type":"library","href":"ari_utils/ari_utils-library.html"}},{"name":"iterateOverListPairs","qualifiedName":"ari_utils.iterateOverListPairs","href":"ari_utils/iterateOverListPairs.html","type":"function","overriddenDepth":0,"packageName":"ari_utils","desc":"","enclosedBy":{"name":"ari_utils","type":"library","href":"ari_utils/ari_utils-library.html"}},{"name":"range","qualifiedName":"ari_utils.range","href":"ari_utils/range.html","type":"function","overriddenDepth":0,"packageName":"ari_utils","desc":"Similar to python range function iterates from start up to yet not including\nstop, incrementing by every step.\nEx:\nfor (int i in range(5, start: 1, step: 2)\n{print(i);}","enclosedBy":{"name":"ari_utils","type":"library","href":"ari_utils/ari_utils-library.html"}},{"name":"reverse","qualifiedName":"ari_utils.reverse","href":"ari_utils/reverse.html","type":"function","overriddenDepth":0,"packageName":"ari_utils","desc":"Returns a reversed shallow copy of input list","enclosedBy":{"name":"ari_utils","type":"library","href":"ari_utils/ari_utils-library.html"}},{"name":"toBool","qualifiedName":"ari_utils.toBool","href":"ari_utils/toBool.html","type":"function","overriddenDepth":0,"packageName":"ari_utils","desc":"Converts any val to boolean\nint != 0\n  null =&gt; false\n  bool =&gt; val\n  tries: val.isNotEmpty\n  if has no getter isNotEmpty =&gt; true","enclosedBy":{"name":"ari_utils","type":"library","href":"ari_utils/ari_utils-library.html"}}]
